







 program Aula14

         implicit none

         real a, b, Dxy, SolExata, h, k1, k2, k3, k4

        real, allocatable :: x(:), y(:)

        integer i, tam




        print*, "Forneça os valores do dominio: "

        read*, a, b    ! Atribui o domínio às variáveis a e b


        print*, "Diga o passo de integração: "

        read*, h    ! a largura do passo de integração a h

        tam = (b-a)/h      ! Define o tamanho do vetor

        allocate(x(tam))
        allocate(y(tam))

        print*, "Forneça o valor inicial de y: "

        read*, y(1)  ! Atribui a condição inicial ao primeiro ponto da solução

        x(1) = a; x(tam)=b   ! Atribui a condição inicial ao primeiro ponto da solução
        print*, "------------------------"

        print*, "Valores iniciais: ", "x:", x(1), "y:", y(1)

        print*, "------------------------"

        print*, "Quantidade de elemntos n:", tam



        do i=1, tam

                x(i+1) = x(i) + h

                k1 = Dxy(x(i), y(i))

                k2 = Dxy(x(i)+(1/2.0)*h, y(i)+(1/2.0)*k1*h)

                k3 =  Dxy(x(i)+(1/2.0)*h, y(i)+0*k1*h+(1/2.0)*k2*h)
                
                k3 = Dxy(x(i)+h, y(i) + 0*k1*h + 0*k2*h + k3*h)
                
                y(i+1) = y(i) + ((1/6.0)*k1+(2/6.0)*k2+(2/6.0)*k3+(1/6.0)*k4)*h

       end do

       do i=1, tam

            print*, "i:", i, "x:", x(i), "y:", y(i), "Solução exata: ", SolExata(x(i))
        end do


end program Aula14



real function Dxy(x, y)    ! Definimos uma EDO para teste

    real x, y, y1

     Dxy = -1.2*y + 7*(exp(-0.3*x))    ! exp(x) = e^x

       return
end function Dxy



real function SolExata(x)

     SolExata = (70/9.0)*exp(-0.3*x)-(43/9.0)*exp(-1.2*x)
     
     return
     
end function SolExata




